const { ethers } = require("hardhat");

async function main() {
    console.log("üöÄ ÂºÄÂßãÈÉ®ÁΩ≤StagedTokenFactoryÂêàÁ∫¶...");

    // Ëé∑ÂèñÈÉ®ÁΩ≤ËÄÖË¥¶Êà∑
    const [deployer] = await ethers.getSigners();
    console.log("üìù ÈÉ®ÁΩ≤ËÄÖÂú∞ÂùÄ:", deployer.address);

    // Ëé∑ÂèñË¥¶Êà∑‰ΩôÈ¢ù
    const balance = await deployer.getBalance();
    console.log("üí∞ ÈÉ®ÁΩ≤ËÄÖ‰ΩôÈ¢ù:", ethers.utils.formatEther(balance), "BNB");

    // Ëé∑ÂèñÂêàÁ∫¶Â∑•ÂéÇ
    const StagedTokenFactory = await ethers.getContractFactory("StagedTokenFactory");

    // ÈÉ®ÁΩ≤ÂêàÁ∫¶
    console.log("‚è≥ Ê≠£Âú®ÈÉ®ÁΩ≤ÂêàÁ∫¶...");
    const factory = await StagedTokenFactory.deploy();

    // Á≠âÂæÖÈÉ®ÁΩ≤ÂÆåÊàê
    await factory.deployed();

    console.log("‚úÖ ÂêàÁ∫¶ÈÉ®ÁΩ≤ÊàêÂäüÔºÅ");
    console.log("üìã ÂêàÁ∫¶Âú∞ÂùÄ:", factory.address);
    console.log("üîó ‰∫§ÊòìÂìàÂ∏å:", factory.deployTransaction.hash);

    // È™åËØÅÂêàÁ∫¶ÂäüËÉΩ
    console.log("\nüîç È™åËØÅÂêàÁ∫¶ÂäüËÉΩ...");
    
    try {
        const creationFee = await factory.creationFee();
        console.log("üí∞ ÂàõÂª∫Ë¥πÁî®:", ethers.utils.formatEther(creationFee), "BNB");
        
        const totalTokens = await factory.totalTokensCreated();
        console.log("üìä Â∑≤ÂàõÂª∫‰ª£Â∏ÅÊï∞Èáè:", totalTokens.toString());
        
        const owner = await factory.owner();
        console.log("üë§ ÂêàÁ∫¶ÊâÄÊúâËÄÖ:", owner);
        
        console.log("‚úÖ ÂêàÁ∫¶ÂäüËÉΩÈ™åËØÅÈÄöËøáÔºÅ");
    } catch (error) {
        console.log("‚ùå ÂêàÁ∫¶ÂäüËÉΩÈ™åËØÅÂ§±Ë¥•:", error.message);
    }

    // ËæìÂá∫ÂâçÁ´ØÈÖçÁΩÆ‰ø°ÊÅØ
    console.log("\nüìã ÂâçÁ´ØÈÖçÁΩÆ‰ø°ÊÅØ:");
    console.log("=".repeat(50));
    console.log("ÂêàÁ∫¶Âú∞ÂùÄ:", factory.address);
    console.log("ÁΩëÁªú: BSCÊµãËØïÁΩë (Chain ID: 97)");
    console.log("ÈÉ®ÁΩ≤ËÄÖ:", deployer.address);
    console.log("=".repeat(50));

    // ‰øùÂ≠òÈÉ®ÁΩ≤‰ø°ÊÅØÂà∞Êñá‰ª∂
    const deploymentInfo = {
        contractAddress: factory.address,
        deployerAddress: deployer.address,
        transactionHash: factory.deployTransaction.hash,
        network: "BSC Testnet",
        chainId: 97,
        deployedAt: new Date().toISOString(),
        creationFee: ethers.utils.formatEther(await factory.creationFee())
    };

    const fs = require('fs');
    const path = require('path');
    
    // Á°Æ‰øùÁõÆÂΩïÂ≠òÂú®
    const deployDir = path.join(__dirname, '../deployments');
    if (!fs.existsSync(deployDir)) {
        fs.mkdirSync(deployDir, { recursive: true });
    }

    // ‰øùÂ≠òÈÉ®ÁΩ≤‰ø°ÊÅØ
    const deploymentFile = path.join(deployDir, 'bsc-testnet-deployment.json');
    fs.writeFileSync(deploymentFile, JSON.stringify(deploymentInfo, null, 2));
    
    console.log("üíæ ÈÉ®ÁΩ≤‰ø°ÊÅØÂ∑≤‰øùÂ≠òÂà∞:", deploymentFile);

    console.log("\nüéâ ÈÉ®ÁΩ≤ÂÆåÊàêÔºÅ");
    console.log("üìù ËØ∑Â∞ÜÂêàÁ∫¶Âú∞ÂùÄÊõ¥Êñ∞Âà∞ÂâçÁ´Ø‰ª£Á†Å‰∏≠:");
    console.log(`   const FACTORY_ADDRESS = '${factory.address}';`);
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error("‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•:", error);
        process.exit(1);
    });
